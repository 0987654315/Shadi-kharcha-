<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Complete Indian Wedding Budget Planner - Track expenses, guests, vendors & timeline">
    <meta name="theme-color" content="#667eea">
    <link rel="manifest" href="/manifest.json">
    <link rel="apple-touch-icon" href="/icon-192.png">
    <title>ShaadiKharcha - Wedding Budget Planner</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;900&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        }
        
        .glass {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        }
        
        .card-hover {
            transition: all 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .float {
            animation: float 3s ease-in-out infinite;
        }
        
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script>
        const { useState, useEffect } = React;
        const h = React.createElement;

        function ShaadiKharcha() {
            // Load data from localStorage
            const loadData = (key, defaultValue) => {
                const saved = localStorage.getItem(key);
                return saved ? JSON.parse(saved) : defaultValue;
            };

            const [activeTab, setActiveTab] = useState('dashboard');
            const [weddingDate, setWeddingDate] = useState(loadData('weddingDate', ''));
            const [coupleName, setCoupleName] = useState(loadData('coupleName', ''));
            const [totalBudget, setTotalBudget] = useState(loadData('totalBudget', 500000));
            
            const [categories, setCategories] = useState(loadData('categories', [
                { id: 1, name: 'Venue (Hall)', icon: 'üèõÔ∏è', budget: 100000, spent: 0, items: [] },
                { id: 2, name: 'Catering', icon: 'üçΩÔ∏è', budget: 150000, spent: 0, items: [] },
                { id: 3, name: 'Photography', icon: 'üì∏', budget: 50000, spent: 0, items: [] },
                { id: 4, name: 'Decoration', icon: 'üé®', budget: 40000, spent: 0, items: [] },
                { id: 5, name: 'Clothes & Jewelry', icon: 'üëó', budget: 80000, spent: 0, items: [] },
                { id: 6, name: 'Mehendi & Sangeet', icon: 'üéµ', budget: 30000, spent: 0, items: [] },
                { id: 7, name: 'Cards & Printing', icon: 'üíå', budget: 15000, spent: 0, items: [] },
                { id: 8, name: 'Makeup & Salon', icon: 'üíÑ', budget: 25000, spent: 0, items: [] },
                { id: 9, name: 'Transportation', icon: 'üöó', budget: 20000, spent: 0, items: [] },
                { id: 10, name: 'Gifts', icon: 'üéÅ', budget: 30000, spent: 0, items: [] },
                { id: 11, name: 'Band Baja', icon: 'üé∫', budget: 15000, spent: 0, items: [] },
                { id: 12, name: 'Miscellaneous', icon: 'üìã', budget: 45000, spent: 0, items: [] }
            ]));

            const [guests, setGuests] = useState(loadData('guests', []));
            const [vendors, setVendors] = useState(loadData('vendors', []));
            const [todos, setTodos] = useState(loadData('todos', []));

            // Save to localStorage
            useEffect(() => {
                localStorage.setItem('weddingDate', JSON.stringify(weddingDate));
                localStorage.setItem('coupleName', JSON.stringify(coupleName));
                localStorage.setItem('totalBudget', JSON.stringify(totalBudget));
                localStorage.setItem('categories', JSON.stringify(categories));
                localStorage.setItem('guests', JSON.stringify(guests));
                localStorage.setItem('vendors', JSON.stringify(vendors));
                localStorage.setItem('todos', JSON.stringify(todos));
            }, [weddingDate, coupleName, totalBudget, categories, guests, vendors, todos]);

            const totalSpent = categories.reduce((sum, cat) => sum + cat.spent, 0);
            const remaining = totalBudget - totalSpent;

            const addExpense = (categoryId, itemName, amount) => {
                setCategories(categories.map(cat => {
                    if (cat.id === categoryId) {
                        return {
                            ...cat,
                            spent: cat.spent + Number(amount),
                            items: [...cat.items, { name: itemName, amount: Number(amount), date: new Date().toLocaleDateString() }]
                        };
                    }
                    return cat;
                }));
            };

            const addGuest = (name, relation, side, attendance) => {
                setGuests([...guests, { 
                    id: Date.now(), 
                    name, 
                    relation, 
                    side, 
                    attendance,
                    addedDate: new Date().toLocaleDateString()
                }]);
            };

            const addVendor = (name, category, contact, amount, status) => {
                setVendors([...vendors, {
                    id: Date.now(),
                    name,
                    category,
                    contact,
                    amount: Number(amount),
                    status,
                    addedDate: new Date().toLocaleDateString()
                }]);
            };

            const addTodo = (task, deadline, priority) => {
                setTodos([...todos, {
                    id: Date.now(),
                    task,
                    deadline,
                    priority,
                    completed: false,
                    addedDate: new Date().toLocaleDateString()
                }]);
            };

            const toggleTodo = (id) => {
                setTodos(todos.map(todo => 
                    todo.id === id ? { ...todo, completed: !todo.completed } : todo
                ));
            };

            const deleteTodo = (id) => {
                setTodos(todos.filter(todo => todo.id !== id));
            };

            const deleteGuest = (id) => {
                setGuests(guests.filter(guest => guest.id !== id));
            };

            const deleteVendor = (id) => {
                setVendors(vendors.filter(vendor => vendor.id !== id));
            };

            const getDaysUntilWedding = () => {
                if (!weddingDate) return 0;
                const today = new Date();
                const wedding = new Date(weddingDate);
                const diff = wedding - today;
                return Math.ceil(diff / (1000 * 60 * 60 * 24));
            };

            // Dashboard Component
            const Dashboard = () => h('div', { className: 'space-y-6' },
                // Wedding Info
                h('div', { className: 'glass rounded-3xl p-8 text-center' },
                    h('div', { className: 'text-6xl mb-4 float' }, 'üíí'),
                    h('h2', { className: 'text-4xl font-black gradient-text mb-2' },
                        coupleName || 'Your Wedding'
                    ),
                    weddingDate && h('div', { className: 'text-xl text-gray-600 mb-4' },
                        `üìÖ ${new Date(weddingDate).toLocaleDateString('hi-IN', { 
                            day: 'numeric', 
                            month: 'long', 
                            year: 'numeric' 
                        })}`
                    ),
                    weddingDate && h('div', { className: 'inline-block bg-gradient-to-r from-pink-500 to-purple-600 text-white px-6 py-3 rounded-full text-2xl font-bold' },
                        `‚è∞ ${getDaysUntilWedding()} ‡§¶‡§ø‡§® ‡§¨‡§æ‡§ï‡•Ä!`
                    )
                ),

                // Budget Overview
                h('div', { className: 'grid md:grid-cols-3 gap-6' },
                    h('div', { className: 'glass rounded-2xl p-6 card-hover' },
                        h('div', { className: 'text-4xl mb-2' }, 'üí∞'),
                        h('div', { className: 'text-sm text-gray-600 mb-1' }, 'Total Budget'),
                        h('div', { className: 'text-3xl font-bold text-blue-600' }, 
                            `‚Çπ${totalBudget.toLocaleString('en-IN')}`
                        )
                    ),
                    h('div', { className: 'glass rounded-2xl p-6 card-hover' },
                        h('div', { className: 'text-4xl mb-2' }, 'üí∏'),
                        h('div', { className: 'text-sm text-gray-600 mb-1' }, 'Total Spent'),
                        h('div', { className: 'text-3xl font-bold text-red-600' }, 
                            `‚Çπ${totalSpent.toLocaleString('en-IN')}`
                        )
                    ),
                    h('div', { className: 'glass rounded-2xl p-6 card-hover' },
                        h('div', { className: 'text-4xl mb-2' }, remaining >= 0 ? '‚úÖ' : '‚ö†Ô∏è'),
                        h('div', { className: 'text-sm text-gray-600 mb-1' }, 'Remaining'),
                        h('div', { 
                            className: `text-3xl font-bold ${remaining >= 0 ? 'text-green-600' : 'text-red-600'}`
                        }, `‚Çπ${Math.abs(remaining).toLocaleString('en-IN')}`)
                    )
                ),

                // Progress Bar
                h('div', { className: 'glass rounded-2xl p-6' },
                    h('div', { className: 'flex justify-between mb-2' },
                        h('span', { className: 'font-semibold text-gray-700' }, 'Budget Usage'),
                        h('span', { className: 'font-bold text-purple-600' }, 
                            `${Math.round((totalSpent / totalBudget) * 100)}%`
                        )
                    ),
                    h('div', { className: 'w-full bg-gray-200 rounded-full h-6' },
                        h('div', {
                            className: `h-6 rounded-full transition-all ${
                                totalSpent > totalBudget 
                                    ? 'bg-gradient-to-r from-red-500 to-red-700' 
                                    : 'bg-gradient-to-r from-purple-500 to-pink-500'
                            }`,
                            style: { width: `${Math.min((totalSpent / totalBudget) * 100, 100)}%` }
                        })
                    )
                ),

                // Quick Stats
                h('div', { className: 'grid grid-cols-2 md:grid-cols-4 gap-4' },
                    [
                        { icon: 'üë•', label: 'Guests', value: guests.length },
                        { icon: 'üè™', label: 'Vendors', value: vendors.length },
                        { icon: '‚úÖ', label: 'Tasks Done', value: todos.filter(t => t.completed).length },
                        { icon: '‚è≥', label: 'Pending', value: todos.filter(t => !t.completed).length }
                    ].map((stat, i) =>
                        h('div', { key: i, className: 'glass rounded-xl p-4 text-center' },
                            h('div', { className: 'text-3xl mb-2' }, stat.icon),
                            h('div', { className: 'text-2xl font-bold text-purple-600' }, stat.value),
                            h('div', { className: 'text-sm text-gray-600' }, stat.label)
                        )
                    )
                )
            );

            // Categories Component
            const Categories = () => {
                const [selectedCategory, setSelectedCategory] = useState(null);
                const [itemName, setItemName] = useState('');
                const [itemAmount, setItemAmount] = useState('');

                const handleAddExpense = () => {
                    if (selectedCategory && itemName && itemAmount) {
                        addExpense(selectedCategory.id, itemName, itemAmount);
                        setItemName('');
                        setItemAmount('');
                    }
                };

                return h('div', { className: 'space-y-6' },
                    h('div', { className: 'glass rounded-3xl p-6' },
                        h('h2', { className: 'text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3' },
                            h('span', null, 'üìä'),
                            'Budget Categories'
                        ),
                        h('div', { className: 'grid md:grid-cols-2 lg:grid-cols-3 gap-4' },
                            categories.map(cat =>
                                h('div', {
                                    key: cat.id,
                                    onClick: () => setSelectedCategory(cat),
                                    className: `glass rounded-xl p-4 cursor-pointer card-hover ${
                                        selectedCategory?.id === cat.id ? 'ring-4 ring-purple-500' : ''
                                    }`
                                },
                                    h('div', { className: 'flex items-center justify-between mb-2' },
                                        h('span', { className: 'text-3xl' }, cat.icon),
                                        h('span', { 
                                            className: `text-xs font-bold px-2 py-1 rounded-full ${
                                                cat.spent > cat.budget 
                                                    ? 'bg-red-100 text-red-700' 
                                                    : 'bg-green-100 text-green-700'
                                            }`
                                        }, cat.spent > cat.budget ? 'Over' : 'OK')
                                    ),
                                    h('div', { className: 'font-bold text-gray-800 mb-2' }, cat.name),
                                    h('div', { className: 'text-sm text-gray-600 mb-2' },
                                        `Budget: ‚Çπ${cat.budget.toLocaleString('en-IN')}`
                                    ),
                                    h('div', { className: 'text-sm font-semibold text-purple-600 mb-2' },
                                        `Spent: ‚Çπ${cat.spent.toLocaleString('en-IN')}`
                                    ),
                                    h('div', { className: 'w-full bg-gray-200 rounded-full h-2' },
                                        h('div', {
                                            className: `h-2 rounded-full ${
                                                cat.spent > cat.budget ? 'bg-red-500' : 'bg-green-500'
                                            }`,
                                            style: { width: `${Math.min((cat.spent / cat.budget) * 100, 100)}%` }
                                        })
                                    )
                                )
                            )
                        )
                    ),

                    selectedCategory && h('div', { className: 'glass rounded-3xl p-6' },
                        h('h3', { className: 'text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2' },
                            h('span', null, selectedCategory.icon),
                            `Add Expense - ${selectedCategory.name}`
                        ),
                        h('div', { className: 'grid md:grid-cols-3 gap-4 mb-6' },
                            h('input', {
                                type: 'text',
                                placeholder: 'Item name (e.g., Advance payment)',
                                value: itemName,
                                onChange: (e) => setItemName(e.target.value),
                                className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                            }),
                            h('input', {
                                type: 'number',
                                placeholder: 'Amount (‚Çπ)',
                                value: itemAmount,
                                onChange: (e) => setItemAmount(e.target.value),
                                className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                            }),
                            h('button', {
                                onClick: handleAddExpense,
                                className: 'bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold rounded-xl hover:scale-105 transition-all'
                            }, '‚ûï Add Expense')
                        ),

                        selectedCategory.items.length > 0 && h('div', null,
                            h('h4', { className: 'font-bold text-gray-700 mb-3' }, 'Expenses:'),
                            h('div', { className: 'space-y-2' },
                                selectedCategory.items.map((item, i) =>
                                    h('div', {
                                        key: i,
                                        className: 'flex justify-between items-center bg-white p-3 rounded-xl'
                                    },
                                        h('div', null,
                                            h('div', { className: 'font-semibold text-gray-800' }, item.name),
                                            h('div', { className: 'text-xs text-gray-500' }, item.date)
                                        ),
                                        h('div', { className: 'font-bold text-purple-600' },
                                            `‚Çπ${item.amount.toLocaleString('en-IN')}`
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
            };

            // Guests Component
            const Guests = () => {
                const [name, setName] = useState('');
                const [relation, setRelation] = useState('');
                const [side, setSide] = useState('bride');
                const [attendance, setAttendance] = useState('confirmed');

                const handleAddGuest = () => {
                    if (name && relation) {
                        addGuest(name, relation, side, attendance);
                        setName('');
                        setRelation('');
                    }
                };

                const brideGuests = guests.filter(g => g.side === 'bride');
                const groomGuests = guests.filter(g => g.side === 'groom');
                const confirmedCount = guests.filter(g => g.attendance === 'confirmed').length;

                return h('div', { className: 'space-y-6' },
                    h('div', { className: 'glass rounded-3xl p-6' },
                        h('h2', { className: 'text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3' },
                            h('span', null, 'üë•'),
                            'Guest List Manager'
                        ),
                        h('div', { className: 'grid md:grid-cols-3 gap-4 mb-6' },
                            h('div', { className: 'text-center p-4 bg-pink-100 rounded-xl' },
                                h('div', { className: 'text-4xl mb-2' }, 'üë∞'),
                                h('div', { className: 'text-2xl font-bold text-pink-600' }, brideGuests.length),
                                h('div', { className: 'text-sm text-gray-600' }, 'Bride Side')
                            ),
                            h('div', { className: 'text-center p-4 bg-blue-100 rounded-xl' },
                                h('div', { className: 'text-4xl mb-2' }, 'ü§µ'),
                                h('div', { className: 'text-2xl font-bold text-blue-600' }, groomGuests.length),
                                h('div', { className: 'text-sm text-gray-600' }, 'Groom Side')
                            ),
                            h('div', { className: 'text-center p-4 bg-green-100 rounded-xl' },
                                h('div', { className: 'text-4xl mb-2' }, '‚úÖ'),
                                h('div', { className: 'text-2xl font-bold text-green-600' }, confirmedCount),
                                h('div', { className: 'text-sm text-gray-600' }, 'Confirmed')
                            )
                        ),

                        h('div', { className: 'bg-white p-6 rounded-2xl' },
                            h('h3', { className: 'text-xl font-bold mb-4' }, '‚ûï Add New Guest'),
                            h('div', { className: 'grid md:grid-cols-2 gap-4 mb-4' },
                                h('input', {
                                    type: 'text',
                                    placeholder: 'Guest Name',
                                    value: name,
                                    onChange: (e) => setName(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('input', {
                                    type: 'text',
                                    placeholder: 'Relation (e.g., Uncle, Friend)',
                                    value: relation,
                                    onChange: (e) => setRelation(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                })
                            ),
                            h('div', { className: 'grid md:grid-cols-3 gap-4' },
                                h('select', {
                                    value: side,
                                    onChange: (e) => setSide(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                },
                                    h('option', { value: 'bride' }, 'üë∞ Bride Side'),
                                    h('option', { value: 'groom' }, 'ü§µ Groom Side')
                                ),
                                h('select', {
                                    value: attendance,
                                    onChange: (e) => setAttendance(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                },
                                    h('option', { value: 'confirmed' }, '‚úÖ Confirmed'),
                                    h('option', { value: 'pending' }, '‚è≥ Pending'),
                                    h('option', { value: 'declined' }, '‚ùå Declined')
                                ),
                                h('button', {
                                    onClick: handleAddGuest,
                                    className: 'bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold rounded-xl hover:scale-105 transition-all'
                                }, 'Add Guest')
                            )
                        )
                    ),

                    guests.length > 0 && h('div', { className: 'glass rounded-3xl p-6' },
                        h('h3', { className: 'text-2xl font-bold text-gray-800 mb-4' }, 'All Guests'),
                        h('div', { className: 'space-y-2 max-h-96 overflow-y-auto' },
                            guests.map(guest =>
                                h('div', {
                                    key: guest.id,
                                    className: 'flex justify-between items-center bg-white p-4 rounded-xl'
                                },
                                    h('div', null,
                                        h('div', { className: 'font-bold text-gray-800 flex items-center gap-2' },
                                            h('span', null, guest.side === 'bride' ? 'üë∞' : 'ü§µ'),
                                            guest.name
                                        ),
                                        h('div', { className: 'text-sm text-gray-600' }, guest.relation)
                                    ),
                                    h('div', { className: 'flex items-center gap-3' },
                                        h('span', { 
                                            className: `text-xs font-bold px-3 py-1 rounded-full ${
                                                guest.attendance === 'confirmed' ? 'bg-green-100 text-green-700' :
                                                guest.attendance === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                                                'bg-red-100 text-red-700'
                                            }`
                                        }, guest.attendance),
                                        h('button', {
                                            onClick: () => deleteGuest(guest.id),
                                            className: 'text-red-500 hover:text-red-700 font-bold'
                                        }, 'üóëÔ∏è')
                                    )
                                )
                            )
                        )
                    )
                );
            };

            // Vendors Component
            const Vendors = () => {
                const [name, setName] = useState('');
                const [category, setCategory] = useState('');
                const [contact, setContact] = useState('');
                const [amount, setAmount] = useState('');
                const [status, setStatus] = useState('pending');

                const handleAddVendor = () => {
                    if (name && category && contact && amount) {
                        addVendor(name, category, contact, amount, status);
                        setName('');
                        setCategory('');
                        setContact('');
                        setAmount('');
                    }
                };

                return h('div', { className: 'space-y-6' },
                    h('div', { className: 'glass rounded-3xl p-6' },
                        h('h2', { className: 'text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3' },
                            h('span', null, 'üè™'),
                            'Vendor Manager'
                        ),
                        h('div', { className: 'bg-white p-6 rounded-2xl mb-6' },
                            h('h3', { className: 'text-xl font-bold mb-4' }, '‚ûï Add New Vendor'),
                            h('div', { className: 'grid md:grid-cols-2 gap-4 mb-4' },
                                h('input', {
                                    type: 'text',
                                    placeholder: 'Vendor Name',
                                    value: name,
                                    onChange: (e) => setName(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('input', {
                                    type: 'text',
                                    placeholder: 'Category (e.g., Caterer)',
                                    value: category,
                                    onChange: (e) => setCategory(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('input', {
                                    type: 'tel',
                                    placeholder: 'Contact Number',
                                    value: contact,
                                    onChange: (e) => setContact(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('input', {
                                    type: 'number',
                                    placeholder: 'Amount (‚Çπ)',
                                    value: amount,
                                    onChange: (e) => setAmount(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                })
                            ),
                            h('div', { className: 'grid md:grid-cols-2 gap-4' },
                                h('select', {
                                    value: status,
                                    onChange: (e) => setStatus(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                },
                                    h('option', { value: 'pending' }, '‚è≥ Pending'),
                                    h('option', { value: 'confirmed' }, '‚úÖ Confirmed'),
                                    h('option', { value: 'paid' }, 'üí∞ Paid')
                                ),
                                h('button', {
                                    onClick: handleAddVendor,
                                    className: 'bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold rounded-xl hover:scale-105 transition-all'
                                }, 'Add Vendor')
                            )
                        ),

                        vendors.length > 0 && h('div', null,
                            h('h3', { className: 'text-2xl font-bold text-gray-800 mb-4' }, 'All Vendors'),
                            h('div', { className: 'space-y-3' },
                                vendors.map(vendor =>
                                    h('div', {
                                        key: vendor.id,
                                        className: 'flex justify-between items-center bg-white p-4 rounded-xl'
                                    },
                                        h('div', null,
                                            h('div', { className: 'font-bold text-gray-800 text-lg' }, vendor.name),
                                            h('div', { className: 'text-sm text-gray-600' }, vendor.category),
                                            h('div', { className: 'text-sm text-purple-600 font-semibold' }, 
                                                `üìû ${vendor.contact}`
                                            )
                                        ),
                                        h('div', { className: 'flex items-center gap-3' },
                                            h('div', { className: 'text-right' },
                                                h('div', { className: 'font-bold text-lg text-gray-800' },
                                                    `‚Çπ${vendor.amount.toLocaleString('en-IN')}`
                                                ),
                                                h('span', { 
                                                    className: `text-xs font-bold px-3 py-1 rounded-full ${
                                                        vendor.status === 'paid' ? 'bg-green-100 text-green-700' :
                                                        vendor.status === 'confirmed' ? 'bg-blue-100 text-blue-700' :
                                                        'bg-yellow-100 text-yellow-700'
                                                    }`
                                                }, vendor.status)
                                            ),
                                            h('button', {
                                                onClick: () => deleteVendor(vendor.id),
                                                className: 'text-red-500 hover:text-red-700 font-bold text-xl'
                                            }, 'üóëÔ∏è')
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
            };

            // Timeline/Todo Component
            const Timeline = () => {
                const [task, setTask] = useState('');
                const [deadline, setDeadline] = useState('');
                const [priority, setPriority] = useState('medium');

                const handleAddTodo = () => {
                    if (task && deadline) {
                        addTodo(task, deadline, priority);
                        setTask('');
                        setDeadline('');
                    }
                };

                const priorityTodos = {
                    high: todos.filter(t => t.priority === 'high'),
                    medium: todos.filter(t => t.priority === 'medium'),
                    low: todos.filter(t => t.priority === 'low')
                };

                return h('div', { className: 'space-y-6' },
                    h('div', { className: 'glass rounded-3xl p-6' },
                        h('h2', { className: 'text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3' },
                            h('span', null, 'üìÖ'),
                            'Wedding Timeline & Tasks'
                        ),
                        h('div', { className: 'bg-white p-6 rounded-2xl mb-6' },
                            h('h3', { className: 'text-xl font-bold mb-4' }, '‚ûï Add New Task'),
                            h('div', { className: 'grid md:grid-cols-3 gap-4 mb-4' },
                                h('input', {
                                    type: 'text',
                                    placeholder: 'Task (e.g., Book venue)',
                                    value: task,
                                    onChange: (e) => setTask(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('input', {
                                    type: 'date',
                                    value: deadline,
                                    onChange: (e) => setDeadline(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                }),
                                h('select', {
                                    value: priority,
                                    onChange: (e) => setPriority(e.target.value),
                                    className: 'px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                },
                                    h('option', { value: 'high' }, 'üî¥ High Priority'),
                                    h('option', { value: 'medium' }, 'üü° Medium'),
                                    h('option', { value: 'low' }, 'üü¢ Low')
                                )
                            ),
                            h('button', {
                                onClick: handleAddTodo,
                                className: 'w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold py-3 rounded-xl hover:scale-105 transition-all'
                            }, 'Add Task')
                        ),

                        todos.length > 0 && h('div', { className: 'space-y-4' },
                            ['high', 'medium', 'low'].map(p =>
                                priorityTodos[p].length > 0 && h('div', { key: p },
                                    h('h4', { className: 'font-bold text-lg mb-3 flex items-center gap-2' },
                                        h('span', null, 
                                            p === 'high' ? 'üî¥' : p === 'medium' ? 'üü°' : 'üü¢'
                                        ),
                                        `${p.charAt(0).toUpperCase() + p.slice(1)} Priority`
                                    ),
                                    h('div', { className: 'space-y-2' },
                                        priorityTodos[p].map(todo =>
                                            h('div', {
                                                key: todo.id,
                                                className: `flex items-center justify-between bg-white p-4 rounded-xl ${
                                                    todo.completed ? 'opacity-50' : ''
                                                }`
                                            },
                                                h('div', { className: 'flex items-center gap-3 flex-1' },
                                                    h('input', {
                                                        type: 'checkbox',
                                                        checked: todo.completed,
                                                        onChange: () => toggleTodo(todo.id),
                                                        className: 'w-6 h-6 cursor-pointer'
                                                    }),
                                                    h('div', null,
                                                        h('div', { 
                                                            className: `font-semibold ${
                                                                todo.completed ? 'line-through text-gray-500' : 'text-gray-800'
                                                            }`
                                                        }, todo.task),
                                                        h('div', { className: 'text-sm text-gray-600' },
                                                            `üìÖ ${new Date(todo.deadline).toLocaleDateString('hi-IN')}`
                                                        )
                                                    )
                                                ),
                                                h('button', {
                                                    onClick: () => deleteTodo(todo.id),
                                                    className: 'text-red-500 hover:text-red-700 font-bold text-xl'
                                                }, 'üóëÔ∏è')
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
            };

            // Settings Component
            const Settings = () => {
                const [newCoupleName, setNewCoupleName] = useState(coupleName);
                const [newWeddingDate, setNewWeddingDate] = useState(weddingDate);
                const [newTotalBudget, setNewTotalBudget] = useState(totalBudget);

                const handleSave = () => {
                    setCoupleName(newCoupleName);
                    setWeddingDate(newWeddingDate);
                    setTotalBudget(Number(newTotalBudget));
                    alert('‚úÖ Settings saved successfully!');
                };

                const handleClearAll = () => {
                    if (confirm('‚ö†Ô∏è Are you sure? This will delete ALL data!')) {
                        localStorage.clear();
                        window.location.reload();
                    }
                };

                const handleExportData = () => {
                    const data = {
                        coupleName,
                        weddingDate,
                        totalBudget,
                        categories,
                        guests,
                        vendors,
                        todos,
                        exportDate: new Date().toISOString()
                    };
                    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `shaadi-kharcha-backup-${Date.now()}.json`;
                    a.click();
                };

                return h('div', { className: 'space-y-6' },
                    h('div', { className: 'glass rounded-3xl p-8' },
                        h('h2', { className: 'text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3' },
                            h('span', null, '‚öôÔ∏è'),
                            'Settings'
                        ),
                        h('div', { className: 'bg-white p-6 rounded-2xl space-y-4' },
                            h('div', null,
                                h('label', { className: 'block font-semibold mb-2' }, 'Couple Names'),
                                h('input', {
                                    type: 'text',
                                    placeholder: 'e.g., Raj & Simran',
                                    value: newCoupleName,
                                    onChange: (e) => setNewCoupleName(e.target.value),
                                    className: 'w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                })
                            ),
                            h('div', null,
                                h('label', { className: 'block font-semibold mb-2' }, 'Wedding Date'),
                                h('input', {
                                    type: 'date',
                                    value: newWeddingDate,
                                    onChange: (e) => setNewWeddingDate(e.target.value),
                                    className: 'w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                })
                            ),
                            h('div', null,
                                h('label', { className: 'block font-semibold mb-2' }, 'Total Budget (‚Çπ)'),
                                h('input', {
                                    type: 'number',
                                    value: newTotalBudget,
                                    onChange: (e) => setNewTotalBudget(e.target.value),
                                    className: 'w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:border-purple-500 outline-none'
                                })
                            ),
                            h('button', {
                                onClick: handleSave,
                                className: 'w-full bg-gradient-to-r from-green-600 to-green-700 text-white font-bold py-3 rounded-xl hover:scale-105 transition-all'
                            }, '‚úÖ Save Settings')
                        )
                    ),

                    h('div', { className: 'glass rounded-3xl p-8' },
                        h('h3', { className: 'text-2xl font-bold text-gray-800 mb-6' }, 'üíæ Data Management'),
                        h('div', { className: 'space-y-4' },
                            h('button', {
                                onClick: handleExportData,
                                className: 'w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white font-bold py-4 rounded-xl hover:scale-105 transition-all flex items-center justify-center gap-2'
                            },
                                h('span', null, 'üì•'),
                                'Export All Data (Backup)'
                            ),
                            h('button', {
                                onClick: handleClearAll,
                                className: 'w-full bg-gradient-to-r from-red-600 to-red-700 text-white font-bold py-4 rounded-xl hover:scale-105 transition-all flex items-center justify-center gap-2'
                            },
                                h('span', null, 'üóëÔ∏è'),
                                'Clear All Data'
                            )
                        )
                    ),

                    h('div', { className: 'glass rounded-3xl p-8' },
                        h('h3', { className: 'text-2xl font-bold text-gray-800 mb-4' }, 'üìä Summary'),
                        h('div', { className: 'bg-white p-6 rounded-2xl space-y-3 text-gray-700' },
                            h('div', { className: 'flex justify-between' },
                                h('span', null, 'Total Categories:'),
                                h('span', { className: 'font-bold' }, categories.length)
                            ),
                            h('div', { className: 'flex justify-between' },
                                h('span', null, 'Total Guests:'),
                                h('span', { className: 'font-bold' }, guests.length)
                            ),
                            h('div', { className: 'flex justify-between' },
                                h('span', null, 'Total Vendors:'),
                                h('span', { className: 'font-bold' }, vendors.length)
                            ),
                            h('div', { className: 'flex justify-between' },
                                h('span', null, 'Total Tasks:'),
                                h('span', { className: 'font-bold' }, todos.length)
                            ),
                            h('div', { className: 'flex justify-between' },
                                h('span', null, 'Completed Tasks:'),
                                h('span', { className: 'font-bold text-green-600' }, 
                                    todos.filter(t => t.completed).length
                                )
                            )
                        )
                    )
                );
            };

            // Main Navigation
            const tabs = [
                { id: 'dashboard', icon: 'üè†', label: 'Dashboard' },
                { id: 'categories', icon: 'üìä', label: 'Budget' },
                { id: 'guests', icon: 'üë•', label: 'Guests' },
                { id: 'vendors', icon: 'üè™', label: 'Vendors' },
                { id: 'timeline', icon: 'üìÖ', label: 'Timeline' },
                { id: 'settings', icon: '‚öôÔ∏è', label: 'Settings' }
            ];

            return h('div', { className: 'min-h-screen p-4 md:p-8' },
                h('div', { className: 'max-w-7xl mx-auto' },
                    // Header
                    h('div', { className: 'glass rounded-3xl p-6 mb-6 text-center' },
                        h('h1', { className: 'text-5xl font-black gradient-text mb-2' }, '‡§∂‡§æ‡§¶‡•Ä ‡§ñ‡§∞‡•ç‡§ö‡§æ'),
                        h('p', { className: 'text-gray-600 text-lg' }, 'Complete Wedding Budget Planner')
                    ),

                    // Navigation Tabs
                    h('div', { className: 'glass rounded-2xl p-2 mb-6 overflow-x-auto' },
                        h('div', { className: 'flex gap-2' },
                            tabs.map(tab =>
                                h('button', {
                                    key: tab.id,
                                    onClick: () => setActiveTab(tab.id),
                                    className: `flex-1 min-w-max px-6 py-3 rounded-xl font-bold transition-all ${
                                        activeTab === tab.id
                                            ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-105'
                                            : 'bg-white text-gray-700 hover:bg-gray-100'
                                    }`
                                },
                                    h('span', { className: 'text-xl mr-2' }, tab.icon),
                                    tab.label
                                )
                            )
                        )
                    ),

                    // Content
                    h('div', null,
                        activeTab === 'dashboard' && h(Dashboard),
                        activeTab === 'categories' && h(Categories),
                        activeTab === 'guests' && h(Guests),
                        activeTab === 'vendors' && h(Vendors),
                        activeTab === 'timeline' && h(Timeline),
                        activeTab === 'settings' && h(Settings)
                    ),

                    // Footer
                    h('div', { className: 'text-center mt-8 text-white text-sm' },
                        h('p', null, 'üíù Made with love for your special day'),
                        h('p', { className: 'mt-1 opacity-75' }, '‚ú® All data saved locally in your browser')
                    )
                )
            );
        }

        ReactDOM.render(
            h(ShaadiKharcha),
            document.getElementById('root')
        );
    </script>
</body>
</html>
